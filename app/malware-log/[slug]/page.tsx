export const dynamic = 'force-static';

import ComponentWrapper from '@/components/component-wrapper';
import { Description, Heading } from '@/components/ui';
import {
  Code,
  Shield,
  Wrench,
  CheckCircle,
  Image as ImageIcon,
} from 'lucide-react';
import React from 'react';
import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import { cn, formatWpDate } from '@/lib/utils';
import { wordpress } from '@/lib/wordpress';
import Image from 'next/image';

interface MalwareLogDetailPageProps {
  params: Promise<{
    slug: string;
  }>;
}

export async function generateMetadata({ params }: MalwareLogDetailPageProps) {
  const { slug } = await params;

  const post = await wordpress.getPostBySlug(slug, 'malware-log');
  if (!post) return { title: 'Log Not Found' };

  const fallbackDescription = post.content
    .replace(/<[^>]*>/g, '')
    .slice(0, 160);
  const fallbackImage = post.acf.screenshot?.[0]?.full_image_url || '';

  return {
    title: post.title,
    description: fallbackDescription,
    alternates: {
      canonical: `https://www.mdpabel.com/malware-log/${slug}`,
    },
    openGraph: {
      title: post.title,
      description: fallbackDescription,
      url: `https://www.mdpabel.com/malware-log/${slug}`,
      type: 'article',
      images: post.featuredImage
        ? [
            {
              url: post.featuredImage.url,
              alt: post.featuredImage.alt || post.title,
            },
          ]
        : fallbackImage
        ? [
            {
              url: fallbackImage,
              alt: post.title,
            },
          ]
        : [],
    },
    twitter: {
      card: 'summary_large_image',
      title: post.title,
      description: fallbackDescription,
      images: post.featuredImage
        ? [post.featuredImage.url]
        : fallbackImage
        ? [fallbackImage]
        : [],
      site: '@mdpabe11', // Replace with your Twitter handle
    },
  };
}

const MalwareLogDetailPage = async ({ params }: MalwareLogDetailPageProps) => {
  const { slug } = await params;

  const post = await wordpress.getPostBySlug(slug, 'malware-log');

  if (!post) {
    notFound();
  }

  return (
    <ComponentWrapper>
      <div className='relative mb-10 pt-20 text-center'>
        {/* Made heading font responsive: smaller on mobile */}
        <Heading className='mb-2 text-3xl sm:text-4xl'>{post.title}</Heading>
        <p className='mb-6 text-slate-400'>{formatWpDate(post.date)}</p>

        <Image
          src={post.acf.screenshot?.[0]?.full_image_url || ''}
          alt={post.title}
          width={800}
          height={600}
        />
      </div>

      {/* Issue Reported */}
      {/* Added responsive padding and margin */}
      <div className='bg-slate-800/50 mb-6 sm:mb-8 p-4 sm:p-6 border border-slate-700 rounded-xl'>
        <div className='flex items-center gap-3 mb-4'>
          <Shield className='w-6 h-6 text-red-400' />
          {/* Responsive title size */}
          <h2 className='font-bold text-white text-xl sm:text-2xl'>
            Issue Reported
          </h2>
        </div>
        <div
          // Added break-words for wrapping long URLs/text; used prose-base on mobile for smaller text
          className='prose-invert max-w-none text-gray-300 break-words prose prose-base sm:prose-lg'
          dangerouslySetInnerHTML={{ __html: post.acf.issue_reported || '' }}
        />
      </div>

      {/* Malware Type */}
      <div className='bg-slate-800/50 mb-6 sm:mb-8 p-4 sm:p-6 border border-slate-700 rounded-xl'>
        <div className='flex items-center gap-3 mb-4'>
          <Code className='w-6 h-6 text-orange-400' />
          <h2 className='font-bold text-white text-xl sm:text-2xl'>
            Malware Type
          </h2>
        </div>
        <div
          className='prose-invert max-w-none text-gray-300 break-words prose prose-base sm:prose-lg'
          dangerouslySetInnerHTML={{ __html: post.acf.malware_type || '' }}
        />
      </div>

      {/* Code Breakdown */}
      <div className='bg-slate-800/50 mb-6 sm:mb-8 p-4 sm:p-6 border border-slate-700 rounded-xl'>
        <div className='flex items-center gap-3 mb-4'>
          <Wrench className='w-6 h-6 text-yellow-400' />
          <h2 className='font-bold text-white text-xl sm:text-2xl'>
            Code Breakdown and Decoding
          </h2>
        </div>
        <div
          className='prose-invert max-w-none text-gray-300 break-words prose prose-base sm:prose-lg'
          dangerouslySetInnerHTML={{
            __html: post.acf.location_of_infection || '',
          }}
        />
      </div>

      {/* Cleanup Steps */}
      {post.acf.cleanup_steps && (
        <div className='bg-slate-800/50 mb-6 sm:mb-8 p-4 sm:p-6 border border-slate-700 rounded-xl'>
          <div className='flex items-center gap-3 mb-4'>
            <CheckCircle className='w-6 h-6 text-green-400' />
            <h2 className='font-bold text-white text-xl sm:text-2xl'>
              Cleanup Steps
            </h2>
          </div>
          <div
            className='prose-invert max-w-none text-gray-300 break-words prose prose-base sm:prose-lg'
            dangerouslySetInnerHTML={{ __html: post.acf.cleanup_steps || '' }}
          />
        </div>
      )}

      {/* Result */}
      <div className='bg-slate-800/50 mb-6 sm:mb-8 p-4 sm:p-6 border border-slate-700 rounded-xl'>
        <div className='flex items-center gap-3 mb-4'>
          <CheckCircle className='w-6 h-6 text-blue-400' />
          <h2 className='font-bold text-white text-xl sm:text-2xl'>Result</h2>
        </div>
        <div
          className='prose-invert max-w-none text-gray-300 break-words prose prose-base sm:prose-lg'
          dangerouslySetInnerHTML={{ __html: post.acf.result || '' }}
        />
      </div>

      {/* Screenshots */}
      <div className='bg-slate-800/50 p-4 sm:p-6 border border-slate-700 rounded-xl'>
        <div className='flex items-center gap-3 mb-4'>
          <ImageIcon className='w-6 h-6 text-purple-400' />
          <h2 className='font-bold text-white text-xl sm:text-2xl'>
            Screenshots
          </h2>
        </div>
        <div
          className={cn(
            'gap-4 grid grid-cols-1',
            post.acf.screenshot?.length > 1
              ? 'md:grid-cols-2 lg:grid-cols-3'
              : 'md:grid-cols-1',
          )}>
          {(post.acf.screenshot || []).map((img: any, index: number) => (
            <img
              key={index}
              src={img.full_image_url}
              alt={`Screenshot ${index + 1}`}
              className='shadow-md rounded-lg w-full h-auto'
            />
          ))}
        </div>
      </div>
    </ComponentWrapper>
  );
};

export default MalwareLogDetailPage;
